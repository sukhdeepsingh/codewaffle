Dars	-1.23152
Ift172	-1.21976
Haus1	-1.18091
Ldha	-1.16558
Golga5	-1.15639
Scd2	-1.14908
Fignl1	-1.13815
Uri1	-1.13457
Tpi1	-1.12419
Xrcc5	-1.11799
Arl14epl	-1.0627
Cpsf3	-1.02808
Upp1	-1.00141")
head(genes2)
g2=bitr(genes2$V1, fromType="SYMBOL", toType="ENTREZID", annoDb ="org.Mm.eg.db")
head(g2)
length(which(genes2[,] %in% g2[,1]))
length(which(genes2[,1] %in% g2[,1]))
nrow(genes2)
genes2[which(genes2[,1] %in% g2[,1])),2]
genes2[which(genes2[,1] %in% g2[,1]),2]
#genes2[which(genes2[,1] %in% g2[,1]),2]
?match
match[genes2[,1],G2[,1]]
match[genes2[,1],g2[,1]]
match(genes2[,1],g2[,1])
match(g2[,1],genes[,1])
match(g2[,1],genes2[,1])
genes2[match(g2[,1],genes2[,1]),2]
g2$foldChange=genes2[match(g2[,1],genes2[,1]),2]
headg2()
head(g2)
gseaGo=gseGO(genes=g2[.2],organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseGO(genes=g2[,2],organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseGO(genes=g2,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseGO(geneList=g2[,c(2:3)],organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
head(summary(gseaGo))
summary(gseaGo)
gseaGo
data(geneList)
library("DOSE")
library("DOSE")
data(geneList)
detach("package:DOSE",unload=TRUE)
detach("DOSE",unload=TRUE)
unloadNamespace("DOSE")
unloadNamespace("clusterProfiler")
unloadNamespace("DOSE")
library(clusterProfiler)
q()
summary(gseaGo)
data(geneList)
library(DOSE)
library(DOSE)
data(geneList)
head(geneList)
#gseaGo=gseGO(geneList=g2[,c(2:3)],organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
g3=g2[,3]
rownames(g3)=g2[,2]
rownames(g3)
colnames(g3)
rownames(g3)=data.frameg2[,2]
rownames(g3)=data.frame(g2[,2])
typeof(geneList)
g
g3
as.double(g3)
list(code = "a", n = rep(10, 3))
data.frame('g3')
data.frame(g3)
t(data.frame(g3))
g3=t(data.frame(g3))
colnames(g3)
rownames(g3)
colnames(g3)=g2[,2]
g3
gseaGo=gseGO(geneList=g3,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseaGO(geneList=g3,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseGO(geneList=g3,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
library(clusterProfiler)
gseaGo=gseGO(geneList=g3,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
summary(gseaGo)
gseaGo
gseaGo=gseGO(geneList=geneList,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
summary(gseaGo)
gseaGo
gseGO(geneList=geneList,organism="mouse",ont="BP",nPerm=100,minGSSize = 120,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo=gseGO(geneList=g3,organism="mouse",ont="BP",nPerm=100,minGSSize = 10,pvalueCutoff = 0.01,verbose=FALSE)
gseaGo
barplot(ggo, drop=TRUE, showCategory=12)
barplot(ego, drop=TRUE, showCategory=12)
barplot(ego, drop=TRUE, showCategory=20)
ego=enrichGO(gene=g[,2],organism="mouse",ont="BP",level=3,readable=TRUE,pAdjustMethod = "BH",pvalueCutoff = 0.01,qvalueCutoff = 0.05)
ego=enrichGO(gene=g[,2],organism="mouse",ont="MF",readable=TRUE,pAdjustMethod = "BH",pvalueCutoff = 0.01,qvalueCutoff = 0.05)
barplot(ego, drop=TRUE, showCategory=20)
ego=enrichGO(gene=g[,2],organism="mouse",ont="CC",level=3,readable=TRUE,pAdjustMethod = "BH",pvalueCutoff = 0.01,qvalueCutoff = 0.05)
ego=enrichGO(gene=g[,2],organism="mouse",ont="BP",level=3,readable=TRUE,pAdjustMethod = "BH",pvalueCutoff = 0.01,qvalueCutoff = 0.05)
ego=enrichGO(gene=g[,2],organism="mouse",ont="BP",readable=TRUE,pAdjustMethod = "BH",pvalueCutoff = 0.01,qvalueCutoff = 0.05)
#enrichMap(ego)
barplot(ego, drop=TRUE, showCategory=20)
enrichMap(ego)
?enrichMap
enrichMap(ego,n=50)
enrichMap(ego,n=20)
enrichMap(ego,n=20,fixed=FALSE)
cnetplot(ego,categorySize = "pvalue",foldChange = g3)
head(g3)
head(geneList)
head(as.double(g3))
geneList[,1]
geneList[1]
rownames(geneList[1])
colnames(geneList[1])
geneList[1]
cnetplot(ego,categorySize = "pvalue",foldChange = as.double(g3))
gseaplot(ego)
library(RCurl)
download.file(
url = "https://raw.githubusercontent.com/slowkow/tftargets/master/data/tftargets.RData",
destfile = "tftargets.RData",
method = "curl"
)
load("tftargets.RData")
TRED[["STAT3"]]
TRED[["MLL1"]]
TRED[["KMT2B"]]
file.remove('tftargets.RData')
q()
library(biomaRt)
library(biomart)
source("http://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomart)
library(biomaRt)
q()
e=read.csv('/private/temp/e',sep='\t',skip=1)
head(e)
e=read.csv('/private/temp/e',sep='\t',skip=1,header=F)
head(e)
mat<- as.matrix(e[,7:ncol(e)])
mat<- as.matrix(e[,7:ncol(e)])
head(mat)
m<- log2(m+1)
mat<- log2(mat+1)
head(mat)
range(m1)
range(mat)
hist(mat)
bk=unique(c(seq(-0.1,3, length=100),seq(3,9.7,length=100)))
head(bk)
hmcols<- colorRampPalette(c("white","red"))(length(bk)-1)
heatmap.2(mat, col=hmcols, breaks = bk, Rowv= TRUE , Colv=FALSE, dendrogram="row", useRaster = TRUE, symkey=FALSE, symm=F, symbreaks=T, scale="none", trace="none", labRow=NA, labCol=NA)
library(heatmap.2)
library(heatmap2)
library(heatmap)
library(gplots)
library(pheatmap)
install.packages(gplots)
install.packages('gplots')
install.packages('pheatmap')
heatmap.2(mat, col=hmcols, breaks = bk, Rowv= TRUE , Colv=FALSE, dendrogram="row", useRaster = TRUE, symkey=FALSE, symm=F, symbreaks=T, scale="none", trace="none", labRow=NA, labCol=NA)
library(gplots)
library(pheatmap)
heatmap.2(mat, col=hmcols, breaks = bk, Rowv= TRUE , Colv=FALSE, dendrogram="row", useRaster = TRUE, symkey=FALSE, symm=F, symbreaks=T, scale="none", trace="none", labRow=NA, labCol=NA)
?range
range(mat,na.r=T)
range(mat,na.r=F)
range(mat,na.rm=F)
range(mat,na.rm=T)
#bk=unique(c(seq(-0.1,3, length=100),seq(3,9.,length=100)))
bk
colorRampPalette(c("white","red"))
colorRampPalette(c("white","red"))[1]
(length(bk)-1)
colorRampPalette(c("white","red"))[198]
colorRampPalette(c("white","red"))(length(bk)-1)
colorRampPalette(c("white","red"))(1)
#e=read.csv('/private/temp/e',sep='\t',skip=1,header=F)
head (e)
library(XML)
library(data.table)
library(lubridate)
library(ggplot2)
library(scales)
library(RJSONIO)
install.packages(data.table)
install.packages("data.table")
install.packages("lubridate")
library(XML)
library(data.table)
library(lubridate)
library(ggplot2)
library(scales)
library(RJSONIO)
?data.table
update.packages()
y
update.packages()
library(XML)
library(data.table)
library(lubridate)
library(ggplot2)
library(scales)
library(RJSONIO)
extractCategories <- function(vec) {
categories <- sapply(as.character(vec),"strsplit",split=",")
categories <- sapply(categories, function(x){str_trim(x)})
return(categories)
}
as.numeric.factor <- function(f) {
return(as.numeric(levels(f))[f])
}
url <- "WordPress.html"
raw <- readHTMLTable(url)
?setnames
DF = data.frame(a=1:2,b=3:4)
DF
try(tracemem(DF))
colnames(DF)[1] <- "A"             # 4 copies of entire object
names(DF)[1] <- "A"                # 3 copies of entire object
names(DF) <- c("A", "b")           # 1 copy of entire object
`names<-`(DF,c("A","b"))           # 1 copy of entire object
DT = data.table(a=1:2,b=3:4,c=5:6)
try(tracemem(DT))
DT
setnames(DT,"b","B")
DT
DF[,B:=NULL]
DT[,B:=NULL]
DT
install.packages('rsjson')
setRepositories()
ap <- available.packages()
"foobarbaz" %in% rownames(ap)
"rsjson" %in% rownames(ap)
library(installr)
updateR()
install.packages(installr)
install.packages('installr')
q()
install.packages('rjson')
library(jsonlite)
all.equal(mtcars, fromJSON(toJSON(mtcars)))
json <- '["Mario", "Peach", null, "Bowser"]'
json
fromJSON(json)
fromJSON(json, simplifyVector = FALSE)
json <-
'[
{"Name" : "Mario", "Age" : 32, "Occupation" : "Plumber"},
{"Name" : "Peach", "Age" : 21, "Occupation" : "Princess"},
{},
{"Name" : "Bowser", "Occupation" : "Koopa"}
]'
json
fromJSON(json)
mydf$Ranking <- c(3, 1, 2, 4)
mydf <- fromJSON(json)
mydf
mydf$Ranking <- c(3, 1, 2, 4)
mydf
toJSON(mydf)
toJSON(mydf,pretty=T)
#ms<-read.csv('ms.')
getwd()
setwd('~/src/codewaffle/d3/')
ms<-read.csv('ms.txt',sep='\t')
ms<-read.csv('ms.txt',sep='\t')
ms
ms<-read.csv('ms.txt',sep='\t')
ms
colnames(ms)
dtToList <- function(x) {
mylist <- list()
colns <- names(x)
colns2 <- names(x)
for (coln in colns) {
if (coln != "comments") {
uniqueEls <- unique(x[[coln]])
for (uniqueEl in uniqueEls) {
# find all rows with this uniqueEl
inds <- which(dt[[coln]] == uniqueEl)
myInnerListE <- list()
for (ind in inds) {
for (coln2 in colns2) {
if (coln2 != coln & coln2 != "comments") {
myInnerListE <- c(myInnerListE, paste0(coln2,".",dt[ind,coln2,with=F][[coln2]]))
}
}
}
myInnerListE <- unique(myInnerListE)
mylistE <- list(name=paste0(coln,".",uniqueEl),size=dt[ind,"comments",with=F][["comments"]],imports=myInnerListE)
mylist.length <- length(mylist)
mylist[[mylist.length+1]] <-  mylistE
}
}
}
return(mylist)
}
dtToList(ms)
dtToList(as.list(ms))
mylist <- list()
x<-ms
colns <- names(x)
colns2 <- names(x)
colns
unique(x[[coln]])
toJSON(ms)
toJSON(ms,pretty = T)
zips <- stream_in(url("http://media.mongodb.org/zips.json"))
str(zips)
head(zips)
#zips <- stream_in(url("http://media.mongodb.org/zips.json"))
head(toJSON(zips,pretty = T))
a=toJSON(zips,pretty = T)
str(a)
summary(a)
head(a)
a
toJSON(ms,pretty = T)
blog=read.csv('blogdata.json')
blog=read.csv('blogdata.json',header=F)
head(blog)
head(paste(readLines('blogdata.json'),collapse=''))
head(blog)
head(paste(readLines('blogdata.json'),collapse=''))
blog=fromJSON(paste(readLines('blogdata.json'),collapse=''))
head(blog)
head(blog)
write.table(blog,'blogdata.txt',row.names = F,sep='\t',quote=F)
write.table(blog,'blogdata.txt',sep='\t',quote=F)
blogDF=data.frame(lapply(blog, as.character), stringsAsFactors=FALSE)
head(blogDF)
write.table(blogDF,'blogdata.txt',row.names = F,sep='\t',quote=F)
read.csv('ms.txt',sep='\t')
read.csv('ms.txt',sep='\t')
ms=toJSON(read.csv('ms.txt',sep='\t'))
ms
ms=toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
ms
ms=toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
ms
blog$imports[1]
str(blog)
#ms=toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
read.csv('ms.txt',sep='\t')
ms=read.csv('ms.txt',sep='\t')
as.list(ms[,3])
as.list(strsplit(ms[,3],"."))
as.list(strsplit(as.character(ms[,3]),"."))
as.list(strsplit(as.character(ms[,3]),","))
as.data.frame(paste(ms[,1:2],as.list(strsplit(as.character(ms[,3]),","))))
as.data.frame(ms[,1:2],as.list(strsplit(as.character(ms[,3]),",")))
as.data.frame(ms[,c(1:2)],as.list(strsplit(as.character(ms[,3]),",")))
strsplit(as.character(ms[,3]),",")
#strsplit(as.character(ms[,3]),",")
ms[,1:2]
ms[,c(1:2)]
ms[,c(1:2)],strsplit(as.character(ms[,3]),",")
data.frame(ms[,c(1:2)],strsplit(as.character(ms[,3]),","))
ms[,c(1:2)]
strsplit(as.character(ms[,3]),",")
ncol(blog)
blog[1:10,1:2]
ms[,1:2]
blog[1:10,1:3]
rbind.data.frame(ms[,1:2],strsplit(as.character(ms[,3]),","))
do.call(rbind.data.frame(ms[,1:2],strsplit(as.character(ms[,3]),",")))
do.call(cbind.data.frame(ms[,1:2],strsplit(as.character(ms[,3]),",")))
cbind.data.frame(ms[,1:2],strsplit(as.character(ms[,3]),","))
nrow(strsplit(as.character(ms[,3]),","))
strsplit(as.character(ms[,3]),",")
unlist(strsplit(as.character(ms[,3]),","))
#strsplit(as.character(ms[,3]),",")
cbind(ms[,1:2],strsplit(as.character(ms[,3]),","))
cbind(ms[1:5,1:2],strsplit(as.character(ms[,3]),","))
cbind(ms[1:5,1:2],a=strsplit(as.character(ms[,3]),","))
rbind(ms[1:5,1:2],a=strsplit(as.character(ms[,3]),","))
strsplit(as.character(ms[,3]),",")
strsplit(as.character(ms[,3]),",")[[1]]
data.frame(ms[1,1:2],strsplit(as.character(ms[,3]),",")[[1]])
data.frame(ms[1,1:2],c(strsplit(as.character(ms[,3]),",")[[1]]))
data.frame("a","b","1:5")
data.frame("a","b",1:5)
data.frame("a","b",as.list(1:5))
blog$imports[1:2]
data.frame("a","b",c=as.list(1:5))
matrix("a","b",c=as.list(1:5))
df1 <- data.frame(Intercept = .4, x1=.4, x2=.2, x3=.7)
df2 <- data.frame(Interceptlego = .5,        x2=.8       )
df1
df2
myList <- list(df1, df2)
myList
myList(ms[,2:3])
list(ms[,2:3])
list(ms[,1:2])
list(ms[,1:2],strsplit(as.character(ms[,3]),","))
list(data.frame(ms[,1:2],strsplit(as.character(ms[,3]),",")))
ms[,1:2],strsplit(as.character(ms[,3]),",")
C(ms[,1:2],strsplit(as.character(ms[,3]),","))
c(ms[,1:2],strsplit(as.character(ms[,3]),","))
data.frame(c(ms[,1:2],strsplit(as.character(ms[,3]),",")))
as.matrix(c(ms[,1:2],strsplit(as.character(ms[,3]),",")))
as.data.frame(as.matrix(c(ms[,1:2],strsplit(as.character(ms[,3]),","))))
matrix(c(ms[,1:2],strsplit(as.character(ms[,3]),",")))
c(ms[,1:2],strsplit(as.character(ms[,3]),","))
blog[1:2.]
blog[1:2,]
c(ms[,1:2],strsplit(as.character(ms[,3]),","))
data.frame(ms[,1:2],strsplit(as.character(ms[,3]),","))
data.frame(ms[,1:2],I(strsplit(as.character(ms[,3]),",")))]
data.frame(ms[,1:2],I(strsplit(as.character(ms[,3]),","))))
data.frame(ms[,1:2],I(strsplit(as.character(ms[,3]),",")))
data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
df=data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
df[,3]
df
head(blog[,3])
df[,3][[1]]
ms=read.csv('ms.txt',sep='\t')
ms
ms$Imports
#df=data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
strsplit(as.character(ms[,3]),",")
strsplit(as.character(ms[,3]),",")
ms=read.csv('ms.txt',sep='\t')
strsplit(as.character(ms[,3]),",")
sapply(ms[,3],function(x)strsplit(x,","))
sapply(as.character(ms[,3]),function(x)strsplit(x,","))
lapply(as.character(ms[,3]),function(x)strsplit(x,","))
lapply(as.character(ms[,3]),function(x)strsplit(x,",")[[1]])
lapply(as.character(ms[,3]),function(x)as.vector(strsplit(x,",")[[1]]))
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,","))))
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",")[[1]])))
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",")[[1]])))[[1]]
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",")[[1]])))[[1]][2]
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",")[[1]])))[[1]][5]
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",",fixed=T)[[1]])))[[1]][5]
lapply(as.character(ms[,3]),function(x)as.vector(unlist(strsplit(x,",",fixed=F)[[1]])))[[1]][5]
df=data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
df
toJSON(df)
toJSON(df,pretty=T)
blog2=read.csv('blogdata.txt',sep='\t')
#df=data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
#blogDF2=data.frame
heazd(blog2)
head(blog2)
blogDF2=data.frame(blog2[,1:2],imports=I(strsplit(as.character(blog2[,3]),",")))
head(blogDF2)
str(blog2[1:5,])
str(blogDF2[1:5,])
str(blogDF[1:5,])
str(blog[1:5,])
head(toJSON(blogDF2,pretty=T))
cat(toJSON(blogDF2),'msData.json')
cat(toJSON(blogDF2),file='msData.json')
cat(toJSON(blog2),file='msData.json')
cat(toJSON(blog2,pretty=T),file='msData.json')
cat(toJSON(blogDF2,pretty=T),file='msData.json')
blogDF2=data.frame(blog2[1:10,1:2],imports=I(strsplit(as.character(blog2[1:10,3]),",")))
cat(toJSON(blogDF2,pretty=T),file='msData.json')
json_file <- "http://webonastick.com/uscl/feeds/uscl.json.txt"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
cat(toJSON(blogDF2,pretty=T),file='msData.json')
cat(toJSON(blogDF2,pretty=T),file='msData.json')
blogDF2=data.frame(blog2[,1:2],imports=I(strsplit(as.character(blog2[1:10,3]),",")))
blogDF2=data.frame(blog2[,1:2],imports=I(strsplit(as.character(blog2[,3]),",")))
cat(toJSON(blogDF2,pretty=T),file='msData.json')
ms
head(blogDF2)
head(blog)
head(blog2)
#blogDF2=data.frame(blog2[,1:2],imports=I(strsplit(as.character(blog2[,3]),",")))
blog=read.csv('blogdata.json')
blog=read.csv('msData2.json',header='f')
blog=read.csv('msData2.json',header='F')
blog=read.csv('msData2.json')
blog=read.csv('msData2.json',header=FALSE)
blogDF=data.frame(blog[,1:2],imports=I(strsplit(as.character(blog[,3]),",")))
head(blogDF)
head(fromJSON(blog))
head(fromJSON('msData2.json'))
blog=read.csv(fromJSON('msData2.json'),header=FALSE)
blog=read.csv(fromJSON('msData2.json')),header=FALSE)
blog=read.csv(fromJSON('msData2.json'))
blog=fromJSON('msData2.json')
head(blog)
cat(toJSON(blog,pretty=T),file='msData.json')
write.table(blog,'blogdata.txt',sep='\t',quote=F,row.names = F)
blogDF<-data.frame(lapply(blog,as.character),stringsAsFactors=FALSE)
head(blogDF)
write.table(blogDF,'blogdata.txt',sep='\t',quote=F,row.names = F)
ms
toJSON('ms.txt')
toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
ms=read.csv('ms.txt',sep='\t')
toJSON(read.csv('ms.txt',sep='\t'))
ms=toJSON(read.csv('ms.txt',sep='\t'))
ms
ms=toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
ms
#ms=toJSON(read.csv('ms.txt',sep='\t'),pretty=T)
ms=read.csv('ms.txt',sep='\t')
ms
msDF=data.frame(ms[,1:2],imports=I(strsplit(as.character(ms[,3]),",")))
msDF
toJSON(msDF)
toJSON(msDF,pretty=T)
head(blog)
q()
